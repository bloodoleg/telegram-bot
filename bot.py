

import os
import asyncio
import datetime
import logging
import re

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          ConversationHandler, ContextTypes, filters, JobQueue)
from flask import Flask
from threading import Thread

app_flask = Flask(__name__)


@app_flask.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î 24/7"



birthdays = {}
ADD_BIRTHDAY = 1

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –≤—Å—Ç–∞–≤–ª–µ–Ω —Å—é–¥–∞
TOKEN = "7650990177:AAGbK924kj-8H7uX13E041kvy78u0vn_WYk"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["–î–æ–¥–∞—Ç–∏ –î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "–°–ø–∏—Å–æ–∫ –î–Ω—ñ–≤ –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"],
                      ["–í—ñ–¥–º—ñ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-—Å–ø–æ–≤—ñ—â—É–≤–∞—á –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.\n"
        "–í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç–∏ —ñ–º–µ–Ω–∞ "
        "—Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞ —Ä–æ—Å—ñ–π—Å—å–∫–æ—é –∞–±–æ —ñ–Ω—à–æ—é –º–æ–≤–æ—é.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=markup)


async def add_birthday_start(update: Update,
                             context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["–í—ñ–¥–º—ñ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è –º–º-–¥–¥ –∞–±–æ –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ –º–º-–¥–¥\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n‚úÖ –û–ª—è 04-15\n‚úÖ –ê–Ω–¥—Ä—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ 12-30",
        reply_markup=markup)
    return ADD_BIRTHDAY


async def add_birthday_process(update: Update,
                               context: ContextTypes.DEFAULT_TYPE):
    print("=== add_birthday_process –≤–∏–∫–ª–∏–∫–∞–Ω–∞! ===")
    text = update.message.text

    if text == "–í—ñ–¥–º—ñ–Ω–∞":
        await start(update, context)
        return ConversationHandler.END

    parts = text.rsplit(" ", 1)
    if len(parts) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "–Ü–º'—è –º–º-–¥–¥ –∞–±–æ –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ –º–º-–¥–¥\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n‚úÖ –û–ª—è 04-15\n‚úÖ –ê–Ω–¥—Ä—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ 12-30")
        return ADD_BIRTHDAY

    name, bday = parts

    if not re.match(r"^\d{2}-\d{2}$", bday):
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞! –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –º–∞—î –±—É—Ç–∏ –º–º-–¥–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 04-15).")
        return ADD_BIRTHDAY

    try:
        datetime.datetime.strptime(bday, "%m-%d")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–º-–¥–¥, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 04-15")
        return ADD_BIRTHDAY

    birthdays[name] = bday
    await update.message.reply_text(f"‚úÖ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name} –¥–æ–¥–∞–Ω–æ!")
    return ConversationHandler.END


async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not birthdays:
        await update.message.reply_text("üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        msg = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n" + "\n".join(
            f"{name}: {date_}" for name, date_ in birthdays.items())
        await update.message.reply_text(msg)


async def birthday_reminder(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now().strftime("%m-%d")
    celebrants = [name for name, date_ in birthdays.items() if date_ == today]
    if celebrants:
        message = "üéâ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É:\n" + "\n".join(celebrants)
        for chat_id in context.bot_data.get("chat_ids", set()):
            try:
                await context.bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                logging.error(
                    f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {chat_id}: {e}")


async def register_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    context.bot_data.setdefault("chat_ids", set()).add(chat_id)
    await update.message.reply_text(
        "‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!")


async def main():
    import nest_asyncio
    nest_asyncio.apply()

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(
        MessageHandler(filters.Regex("^–°–ø–∏—Å–æ–∫ –î–Ω—ñ–≤ –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$"),
                       list_birthdays))
    app.add_handler(MessageHandler(filters.Regex("^–í—ñ–¥–º—ñ–Ω–∞$"), start))
    app.add_handler(CommandHandler("subscribe", register_chat))

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^–î–æ–¥–∞—Ç–∏ –î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$"),
                           add_birthday_start)
        ],
        states={
            ADD_BIRTHDAY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               add_birthday_process)
            ]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í—ñ–¥–º—ñ–Ω–∞$"), start)],
    )
    app.add_handler(conv_handler)

    job_queue: JobQueue = app.job_queue
    job_queue.run_daily(birthday_reminder,
                        time=datetime.time(hour=9, minute=0))

    await app.run_polling()


if __name__ == "__main__":
    asyncio.run(main())
