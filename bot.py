import os
import asyncio
import datetime
import logging
import re

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters, JobQueue
)

# -----------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# -----------------------
TOKEN = "7650990177:AAGbK924kj-8H7uX13E041kvy78u0vn_WYk"  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather
ADD_BIRTHDAY = 1  # –°–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler
birthdays = {}    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è (–∏–º—è -> –¥–∞—Ç–∞)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -----------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
# -----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫."""
    reply_keyboard = [
        ["–î–æ–¥–∞—Ç–∏ –î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "–°–ø–∏—Å–æ–∫ –î–Ω—ñ–≤ –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"],
        ["–í—ñ–¥–º—ñ–Ω–∞"]
    ]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–ø–æ–≤—ñ—â—É–≤–∞—á –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.\n"
        "–í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∞–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏ "
        "–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=markup
    )

# -----------------------
# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–†
# -----------------------
async def add_birthday_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è."""
    reply_keyboard = [["–í—ñ–¥–º—ñ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è –º–º-–¥–¥ –∞–±–æ –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ –º–º-–¥–¥\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n‚úÖ –û–ª—è 04-15\n‚úÖ –ê–Ω–¥—Ä—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ 12-30",
        reply_markup=markup
    )
    return ADD_BIRTHDAY

# -----------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–º—è + –¥–∞—Ç–∞)
# -----------------------
async def add_birthday_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–í—ñ–¥–º—ñ–Ω–∞"
    if text == "–í—ñ–¥–º—ñ–Ω–∞":
        await start(update, context)
        return ConversationHandler.END

    parts = text.rsplit(" ", 1)
    if len(parts) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "–Ü–º'—è –º–º-–¥–¥ –∞–±–æ –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ –º–º-–¥–¥\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n‚úÖ –û–ª—è 04-15\n‚úÖ –ê–Ω–¥—Ä—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ 12-30"
        )
        return ADD_BIRTHDAY

    name, bday = parts

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –º–º-–¥–¥
    if not re.match(r"^\d{2}-\d{2}$", bday):
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞! –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –º–∞—î –±—É—Ç–∏ –º–º-–¥–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 04-15)."
        )
        return ADD_BIRTHDAY

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω–∞—è
    try:
        datetime.datetime.strptime(bday, "%m-%d")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–º-–¥–¥, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 04-15"
        )
        return ADD_BIRTHDAY

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
    birthdays[name] = bday
    await update.message.reply_text(f"‚úÖ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name} –¥–æ–¥–∞–Ω–æ!")

    return ConversationHandler.END

# -----------------------
# –°–ø–∏—Å–æ–∫ –î–Ω–µ–π –†–æ–∂–¥–µ–Ω–∏—è
# -----------------------
async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è."""
    if not birthdays:
        await update.message.reply_text("üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        msg = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n"
        for person, date_ in birthdays.items():
            msg += f"{person}: {date_}\n"
        await update.message.reply_text(msg)

# -----------------------
# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –î–†
# -----------------------
async def birthday_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏, –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    today = datetime.datetime.now().strftime("%m-%d")
    celebrants = [name for name, date_ in birthdays.items() if date_ == today]

    if celebrants:
        message = "üéâ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É:\n" + "\n".join(celebrants)
        # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–≤—à–∏–º—Å—è
        for chat_id in context.bot_data.get("chat_ids", set()):
            try:
                await context.bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {chat_id}: {e}")

# -----------------------
# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (/subscribe)
# -----------------------
async def register_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    chat_id = update.message.chat_id
    context.bot_data.setdefault("chat_ids", set()).add(chat_id)
    await update.message.reply_text("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!")

# -----------------------
# –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# -----------------------
async def main():
    import nest_asyncio
    nest_asyncio.apply()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, filters

    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("subscribe", register_chat))
    app.add_handler(MessageHandler(filters.Regex("^–°–ø–∏—Å–æ–∫ –î–Ω—ñ–≤ –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$"), list_birthdays))

    # –ö–Ω–æ–ø–∫–∞ "–í—ñ–¥–º—ñ–Ω–∞"
    app.add_handler(MessageHandler(filters.Regex("^–í—ñ–¥–º—ñ–Ω–∞$"), start))

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–†
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–î–æ–¥–∞—Ç–∏ –î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$"), add_birthday_start)],
        states={
            ADD_BIRTHDAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_birthday_process)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í—ñ–¥–º—ñ–Ω–∞$"), start)],
    )
    app.add_handler(conv_handler)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤ 9:00)
    job_queue: JobQueue = app.job_queue
    job_queue.run_daily(birthday_reminder, time=datetime.time(hour=9, minute=0))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling)
    await app.run_polling()

# -----------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# -----------------------
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())



      
