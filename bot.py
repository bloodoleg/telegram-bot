import logging
import re
import datetime
import nest_asyncio
import threading

from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters, JobQueue
)

TOKEN = "7650990177:AAGbK924kj-8H7uX13E041kvy78u0vn_WYk"

# Flask-–∑–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –≤–µ–±-—Å–µ—Ä–≤–∏—Å
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î 24/7 –Ω–∞ Render!"

birthdays = {}   # –∏–º—è -> –¥–∞—Ç–∞ (–º–º-–¥–¥)
ADD_BIRTHDAY = 1 # —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [
        ["–î–æ–¥–∞—Ç–∏ –î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "–°–ø–∏—Å–æ–∫ –î–Ω—ñ–≤ –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"],
        ["–í—ñ–¥–º—ñ–Ω–∞"]
    ]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-—Å–ø–æ–≤—ñ—â—É–≤–∞—á –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.\n"
        "–í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç–∏ —ñ–º–µ–Ω–∞ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞\n"
        "—Ä–æ—Å—ñ–π—Å—å–∫–æ—é –∞–±–æ —ñ–Ω—à–æ—é –º–æ–≤–æ—é.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=markup
    )

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–†
async def add_birthday_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["–í—ñ–¥–º—ñ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è –º–º-–¥–¥ –∞–±–æ –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ –º–º-–¥–¥\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n‚úÖ –û–ª—è 04-15\n‚úÖ –ê–Ω–¥—Ä—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ 12-30",
        reply_markup=markup
    )
    return ADD_BIRTHDAY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ (–∏–º—è + –¥–∞—Ç–∞)
async def add_birthday_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–í—ñ–¥–º—ñ–Ω–∞":
        await start(update, context)
        return ConversationHandler.END

    parts = text.rsplit(" ", 1)
    if len(parts) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "–Ü–º'—è –º–º-–¥–¥ –∞–±–æ –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ –º–º-–¥–¥\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n‚úÖ –û–ª—è 04-15\n‚úÖ –ê–Ω–¥—Ä—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ 12-30"
        )
        return ADD_BIRTHDAY

    name, bday = parts

    if not re.match(r"^\d{2}-\d{2}$", bday):
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞! –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –º–∞—î –±—É—Ç–∏ –º–º-–¥–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 04-15)."
        )
        return ADD_BIRTHDAY

    try:
        datetime.datetime.strptime(bday, "%m-%d")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–º-–¥–¥, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 04-15"
        )
        return ADD_BIRTHDAY

    birthdays[name] = bday
    await update.message.reply_text(f"‚úÖ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name} –¥–æ–¥–∞–Ω–æ!")
    return ConversationHandler.END

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –î–†
async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not birthdays:
        await update.message.reply_text("üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        msg = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n"
        for person, date_ in birthdays.items():
            msg += f"{person}: {date_}\n"
        await update.message.reply_text(msg)

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def birthday_reminder(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now().strftime("%m-%d")
    celebrants = [name for name, date_ in birthdays.items() if date_ == today]
    if celebrants:
        message = "üéâ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É:\n" + "\n".join(celebrants)
        for chat_id in context.bot_data.get("chat_ids", set()):
            try:
                await context.bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {chat_id}: {e}")

# /subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def register_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    context.bot_data.setdefault("chat_ids", set()).add(chat_id)
    await update.message.reply_text("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!")

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø–æ—Ç–æ–∫–µ
def run_telegram_bot():
    nest_asyncio.apply()

    from telegram.ext import (
        ApplicationBuilder, CommandHandler, MessageHandler,
        ConversationHandler, filters
    )

    app_telegram = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CommandHandler("subscribe", register_chat))
    app_telegram.add_handler(MessageHandler(filters.Regex("^–°–ø–∏—Å–æ–∫ –î–Ω—ñ–≤ –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$"), list_birthdays))
    app_telegram.add_handler(MessageHandler(filters.Regex("^–í—ñ–¥–º—ñ–Ω–∞$"), start))

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–†
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–î–æ–¥–∞—Ç–∏ –î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è$"), add_birthday_start)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_birthday_process)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í—ñ–¥–º—ñ–Ω–∞$"), start)],
    )
    app_telegram.add_handler(conv_handler)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ 9:00
    job_queue: JobQueue = app_telegram.job_queue
    job_queue.run_daily(birthday_reminder, time=datetime.time(hour=9, minute=0))

    logger.info("–ó–∞–ø—É—Å–∫–∞—é long polling –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    # –û–¢–ö–õ–Æ–ß–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ set_wakeup_fd
    app_telegram.run_polling(stop_signals=None)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling) –≤ –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_telegram_bot, daemon=True).start()

# –ó–∞–ø—É—Å–∫ Flask (–≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
